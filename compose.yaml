secrets:
  cf_api_token:
    file: ./traefik/cf_api_token.txt
networks:
  public:
    #driver: bridge
    external: true
    name: public
  proxy:
    driver: bridge
    internal: true
    name: proxy
  services:
    driver: bridge
    internal: true
    name: services
  loki-net:
    driver: bridge
    internal: true
    name: loki-net

services:
  dockerproxy:
    image: ghcr.io/tecnativa/docker-socket-proxy:latest
    container_name: dockerproxy
    networks:
      - proxy
    environment:
      - CONTAINERS=1
      - SERVICES=1 
      - TASKS=1
      - POST=0
    ports: 
      - '2375:2375'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: always

  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: homepage
    networks:
      - services
    expose:
      - '3000'
    environment:
      - PUID=1000 
      - PGID=1000
    volumes:
      - ./homepage/config:/app/config
      - ./homepage/pictures:/app/public/images
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.homepage.loadbalancer.server.port=3000"
      - "traefik.http.routers.homepage.entrypoints=http"
      - "traefik.http.routers.homepage.rule=Host(`hp.moculescu.de`)"
    restart: always

  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    env_file: .env
    networks:
      - proxy
      - services
      - public
    # For DHCP it is recommended to remove these ports and instead add: network_mode: "host"
    ports:
      - "53:53/tcp"
      - "53:53/udp"
        #- "67:67/udp" # Only required if you are using Pi-hole as your DHCP server
    expose:
      - "80"
    environment:
      TZ: 'Europe/Berlin'
    # Volumes store your data between container upgrades
    volumes:
      - './pihole/etc-pihole:/etc/pihole'
      - './pihole/etc-dnsmasq.d:/etc/dnsmasq.d'
    #   https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
    #cap_add:
    #- NET_ADMIN # Required if you are using Pi-hole as your DHCP server, else not needed
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.pihole.loadbalancer.server.port=80"
      - "traefik.http.routers.pihole.entrypoints=http"
      - "traefik.http.routers.pihole.rule=Host(`pihole.moculescu.de`)"

  uptime-kuma:
    image: louislam/uptime-kuma:1
    container_name: kuma
    networks:
      - services
      - proxy
    volumes:
      - ./uptime_kuma/uptime-kuma-data:/app/data
    expose:
      - 3001
    restart: always
    labels:
      - traefik.enable=true
      - traefik.http.services.kuma.loadbalancer.server.port=3001
      - traefik.http.routers.kuma.entrypoints=http
      - 'traefik.http.routers.kuma.rule=Host(`kuma.moculescu.de`)'

  
  nginx:
    container_name: nginx
    image: nginx:1-alpine
    networks: 
      - services
    expose:
      - "80"
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.wp.loadbalancer.server.port=80"
      - "traefik.http.routers.wp.entrypoints=http"
      - "traefik.http.routers.wp.rule=Host(`moculescu.de`)"


  reverse-proxy:
    container_name: traefik
    image: traefik:v3.3
    depends_on:
      - dockerproxy
    networks:
      - proxy
      - public
      - services
    ports:
      - "80:80"
      - "8080:8080"
      - "443:443"
    environment:
      CF_DNS_API_TOKEN_FILE: /run/secrets/cf_api_token
    secrets:
      - cf_api_token
    volumes:
      - ./traefik/traefik.yaml:/traefik.yaml:ro
      - ./traefik/access.log:/var/log/traefik/access.log
      - ./traefik/acme.json:/acme.json
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"
      - "traefik.http.routers.traefik.entrypoints=http"
      - "traefik.http.routers.traefik.rule=Host(`traefik.moculescu.de`)"
      - "traefik.http.routers.traefik-secure.entrypoints=https"
      - "traefik.http.routers.traefik-secure.rule=Host(`traefik.moculescu.de`)"
      - "traefik.http.routers.traefik-secure.tls=true"
      - "traefik.http.routers.traefik-secure.tls.certresolver=cloudflare"
      - "traefik.http.routers.traefik-secure.tls.domains[0].main=moculescu.de"
      - "traefik.http.routers.traefik-secure.tls.domains[0].sans=*.moculescu.de"


  loki:
    container_name: loki
    image: grafana/loki:latest
    ports:
       - "3100:3100"
    networks:
     - loki-net
    volumes:
      - ./grafana/loki-config.yaml:/etc/loki/loki-config.yaml
    restart: always

  promtail:
    container_name: promtail
    image: grafana/promtail:latest
    volumes:
      - ./grafana/promtail-config.yaml:/etc/promtail/promtail-config.yaml
    networks:
      - loki-net
    depends_on:
      - loki
    restart: always

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    env_file: .env
    expose:
      - "3002"
    networks:
      - loki-net
      - services
    depends_on:
      - loki
    volumes:
      - "./grafana/grafana.ini:/etc/grafana/grafana.ini"
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.grafana.loadbalancer.server.port=3002"
      - "traefik.http.routers.grafana.entrypoints=http"
      - "traefik.http.routers.grafana.rule=Host(`grafana.moculescu.de`)"
    restart: always
